/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/brain.glb --types --output src/brain.tsx 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
  }
  materials: {}
  animations: any[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Brain(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/brain.glb') as GLTFResult
  const mat = <meshStandardMaterial color="turquoise" opacity={0.2} transparent />
  return (
    <group scale={1.8} {...props} dispose={null}>
      <mesh geometry={nodes.Cube.geometry} material={nodes.Cube.material} position={[0, 1.232, 0]}>
        {mat}
      </mesh>
    </group>
  )
}

useGLTF.preload('/brain.glb')
