/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/thirdHeadMesh.glb --types --output src/head.tsx 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { Outlines, QuadraticBezierLine, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { motion as motion3d } from "framer-motion-3d"
import { Vector3, useFrame, useThree } from '@react-three/fiber'
import Idea from './Idea'
import IdeaCloud from './IdeaCloud'

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
    female_head: THREE.Mesh
    female_head001: THREE.Mesh
  }
  materials: {}
  animations: any[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Head(props: JSX.IntrinsicElements['group']) {
  const brain = useRef<any>(!null)
  const mat = <meshStandardMaterial color="#A2FDFD" opacity={0.5} transparent toneMapped={true} />
  const mat2 = <meshStandardMaterial color="#29A2A6" opacity={1} transparent toneMapped={true} />
  const { nodes, materials } = useGLTF('/thirdHeadMesh.glb') as GLTFResult
  const { viewport } = useThree();

  const start: any = [0, 0, 0]
  const end: any = [1, 1, 1]
  return (
    <group scale={Math.max(1, Math.min(.1 * viewport.width, 2))} {...props} dispose={null}>
      <motion3d.mesh ref={brain} renderOrder={0} geometry={nodes.Cube.geometry} material={nodes.Cube.material} position={[0.082, 3.899, 0]} >{mat2}</motion3d.mesh>
      <motion3d.mesh renderOrder={1} geometry={nodes.female_head.geometry} material={nodes.female_head.material} position={[-0.1, 2.675, 0.691]} >{mat}</motion3d.mesh>
      <motion3d.mesh renderOrder={1} geometry={nodes.female_head001.geometry} material={nodes.female_head001.material} position={[-0.1, 2.675, -0.692]} >{mat}</motion3d.mesh>
      <IdeaCloud centerPoint={[0.082, 3.899, 0]} />
    </group>
  )
}

useGLTF.preload('/thirdHeadMesh.glb')
