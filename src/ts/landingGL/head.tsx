/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/thirdHeadMesh.glb --types --output src/head.tsx 
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { motion as motion3d } from "framer-motion-3d";
import { useThree } from "@react-three/fiber";
import IdeaCloud from "./IdeaCloud";
import { useAnimation } from "framer-motion";
import router from "next/router";
import { useSearchParams } from "next/navigation";
import { Hand } from "@/Hand";

const materialVariants = {
  initial: { opacity: 0 },
  hide: { opacity: 0.1 },
  enter: {
    opacity: 0.4,
    transition: {
      type: "spring",
      damping: 10,
      stiffness: 50,
      restDelta: 0.1,
    },
  },
  exit: {
    opacity: 0, transition: {
      type: "spring",
      damping: 10,
      stiffness: 50,
      restDelta: 0.1, delay: 0.25
    }
  },
};

const material2Variants = {
  initial: { opacity: 0 },
  hide: { opacity: 0.1 },
  enter: {
    opacity: 1,
    transition: {
      type: "spring",
      damping: 10,
      stiffness: 50,
      restDelta: 0.1,
    }
  },
  exit: {
    opacity: 0, transition: {
      type: "spring",
      damping: 10,
      stiffness: 50,
      restDelta: 0.1, delay: 0.25
    }
  },
};

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh;
    female_head: THREE.Mesh;
    female_head001: THREE.Mesh;
  };
  materials: {};
  animations: any[];
};

interface HeadProps {
  position: [number, number, number];
  rotation: [number, number, number];
}

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Head(props: HeadProps) {
  //searchParams
  const searchParams = useSearchParams();

  // refs
  const brain = useRef<any>(!null);

  // animation controls
  const controls = useAnimation();
  const controls2 = useAnimation();

  // GLTF
  const { nodes, materials } = useGLTF("/thirdHeadMesh.glb") as GLTFResult;

  // THREE helpers
  const { viewport } = useThree();

  // states
  const [disposed, setDisposed] = useState(false);
  const [isInPage, setIsInPage] = useState(false);

  // materials
  const mat = (
    <motion3d.meshStandardMaterial
      initial="initial"
      animate={controls}
      exit="exit"
      variants={materialVariants}
      color="#A2FDFD"

      transparent
      toneMapped
    />
  );
  const mat2 = (
    <motion3d.meshStandardMaterial
      initial="initial"
      animate={controls}
      exit="exit"
      variants={material2Variants}
      color="#29A2A6"

      transparent
      toneMapped
    />
  );

  // UEF for mounting and visibility
  useEffect(() => {
    if (router.pathname === "/") {
      setTimeout(() => {
        setDisposed(false);
        setIsInPage(true);
      }, 1000);
    } else {
      setTimeout(() => {
        controls2.start("exit")
        controls.start("exit").then(() => {
          setIsInPage(false), setDisposed(true);
        });
      }, 800)

    }
  }, [router.pathname]);

  useEffect(() => {
    if (isInPage) {
      controls.start("enter")
      controls2.start("enter")
    }
  }, [isInPage]);

  //searchParams
  useEffect(() => {
    if (isInPage) {
      controls.start(searchParams.get("view") !== null ? "hide" : "enter");
      controls2.start(searchParams.get("view") !== null ? "hide" : "enter");
    }
  }, [searchParams]);

  return (
    <motion3d.group
      position={props.position}
      rotation={props.rotation}
      scale={Math.max(0.6, Math.min(0.125 * viewport.width, 1.5))}
      dispose={null}
    >
      <motion3d.mesh
        ref={brain}
        renderOrder={4}
        geometry={nodes.Cube.geometry}
        position={[0.082, 3.899, 0]}
      >
        {mat2}
      </motion3d.mesh>
      <motion3d.mesh
        renderOrder={5}
        geometry={nodes.female_head.geometry}
        position={[-0.1, 2.675, 0.691]}
      >
        {mat}
      </motion3d.mesh>
      <motion3d.mesh
        renderOrder={5}
        geometry={nodes.female_head001.geometry}
        position={[-0.1, 2.675, -0.692]}
      >
        {mat}
      </motion3d.mesh>
      <IdeaCloud centerPoint={[0.082, 3.899, 0]} />
    </motion3d.group>
  );
}

useGLTF.preload("/thirdHeadMesh.glb");
