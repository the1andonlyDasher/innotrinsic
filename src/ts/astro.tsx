/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/astro.glb --types --output src/astro.tsx 
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { Float, QuadraticBezierLine, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { motion } from "framer-motion-3d";
import { loc } from "./atoms";
import { useAtom } from "jotai";
import { useAnimation } from "framer-motion";

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh;
    Cube001: THREE.Mesh;
    Cube002: THREE.Mesh;
    Cube003: THREE.Mesh;
    Cube004: THREE.Mesh;
    Cube005: THREE.Mesh;
    Cube006: THREE.Mesh;
    Cube007: THREE.Mesh;
  };
  materials: {};
  animations: any[];
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Astro(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/astro.glb") as GLTFResult;
  const [app, setApp] = useAtom(loc)
  const star1 = useRef<any>(!null);
  const star2 = useRef<any>(!null);
  const star3 = useRef<any>(!null);
  const line12 = useRef<any>(!null);
  const line23 = useRef<any>(!null);
  const line31 = useRef<any>(!null);
  const mat = <meshStandardMaterial color={"#2181ff"} />;
  const mat2 = <meshStandardMaterial color={"turquoise"} />;
  useFrame((state, delta) => {
    line12.current.setPoints(star1.current.position, star2.current.position);
    line12.current.setPoints(star1.current.position, star2.current.position);
    line12.current.setPoints(star1.current.position, star2.current.position);
  })
  const groupControls = useAnimation();
  useEffect(() => {
    groupControls.start(app === "second" ? { scale: 0.65 } : { scale: 0 })
  }, [app]);

  return (
    <motion.group animate={groupControls} rotation={[0, Math.PI / 2, 0]}>
      <Float>
        <motion.mesh
          ref={star1}
          geometry={nodes.Cube.geometry}
          position={[0, 0.08, -2.135]}
          initial={{ x: 0, y: 0.08, z: -2.135, rotateY: 0, rotateZ: 1.5, rotateX: 1.5 }}
          animate={{ x: -0.5, y: 0.2, z: -2.157, rotateY: 0.1, rotateZ: 1.4, rotateX: 1.6 }}
          transition={{ repeat: Infinity, repeatType: "mirror", duration: 4, type: "tween" }}
        >

          {mat2}
        </motion.mesh>

        <QuadraticBezierLine ref={line12} color="#fff" lineWidth={3} dashed needsUpdate dashOffset={.1} dashSize={0.5} dashScale={4} start={star1.current.position} end={star2.current.position} />
        <motion.mesh ref={star2} geometry={nodes.Cube001.geometry} position={[0.753, 2.191, -2.838]}
          initial={{ x: 0.753, y: 2.191, z: -2.838, rotateY: 0, rotateZ: 1.5, rotateX: 1.5 }}
          animate={{ x: 0.754, y: 2.193, z: -2.82, rotateY: 0.1, rotateZ: 1.4, rotateX: 1.6 }}
          transition={{ repeat: Infinity, repeatType: "mirror", duration: 3, type: "tween" }}
        >

          {mat2}
        </motion.mesh>
        <QuadraticBezierLine ref={line23} color="#fff" lineWidth={3} dashed needsUpdate dashOffset={.1} dashSize={0.5} dashScale={4} start={star2.current.position} end={star3.current.position} />
        <QuadraticBezierLine ref={line31} color="#fff" lineWidth={3} dashed needsUpdate dashOffset={.1} dashSize={0.5} dashScale={4} start={star1.current.position} end={star3.current.position} />
        <motion.mesh ref={star3} geometry={nodes.Cube002.geometry} position={[-0.29, 1.436, -0.176]}
          initial={{ x: -0.29, y: 1.436, z: -0.176, rotateY: 0, rotateZ: 1.5, rotateX: 1.5 }}
          animate={{ x: -0.33, y: 1.536, z: -0.136, rotateY: 0.1, rotateZ: 1.4, rotateX: 1.6 }}
          transition={{ repeat: Infinity, repeatType: "mirror", duration: 2.7, type: "tween" }}
        >

          {mat2}
        </motion.mesh>
        <motion.mesh
          initial={{ x: 0.753, y: 3.557, z: -2.333, rotateY: 0, rotateZ: 0, rotateX: -1.6 }}
          animate={{ x: 0.853, y: 3.67, z: -2.233, rotateY: 3.141, rotateZ: 1.4, rotateX: 1.6 }}
          transition={{ repeat: Infinity, repeatType: "mirror", duration: 5, type: "tween" }}
          geometry={nodes.Cube003.geometry} position={[0.753, 3.557, -2.333]}>

          {mat}
        </motion.mesh>
        <motion.mesh
          initial={{ x: 0.753, y: 1.444, z: -3.986, rotateY: 0, rotateZ: 0, rotateX: -1.6 }}
          animate={{ x: 0.653, y: 1.64, z: -3.786, rotateY: 3.141, rotateZ: 1.4, rotateX: 1.6 }}
          transition={{ repeat: Infinity, repeatType: "mirror", duration: 3.5, type: "tween" }}
          geometry={nodes.Cube004.geometry} position={[0.753, 1.444, -3.986]}>

          {mat}
        </motion.mesh>
        <motion.mesh
          initial={{ x: 0.753, y: -0.037, z: 0.721, rotateY: 0.1, rotateZ: 1.4, rotateX: -0.6 }}
          animate={{ x: 0.853, y: -0.057, z: 0.521, rotateY: 1.5, rotateZ: -1.4, rotateX: 1.6 }}
          transition={{ repeat: Infinity, repeatType: "mirror", duration: 4, type: "tween" }}
          geometry={nodes.Cube005.geometry} position={[0.753, -0.037, 0.721]}>

          {mat}
        </motion.mesh>
        <motion.mesh
          initial={{ x: 0.321, y: 3.1, z: -0.573, rotateY: 0.1, rotateZ: 2, rotateX: 0 }}
          animate={{ x: 0.221, y: 3.3, z: -0.373, rotateY: -1.1, rotateZ: -1.4, rotateX: 1.6 }}
          transition={{ repeat: Infinity, repeatType: "mirror", duration: 6, type: "tween" }}
          geometry={nodes.Cube006.geometry} position={[0.321, 3.1, -0.573]}>

          {mat}
        </motion.mesh>
        <motion.mesh
          initial={{ x: 0.321, y: 0.716, z: -3.176, rotateY: -0.1, rotateZ: 1, rotateX: 1 }}
          animate={{ x: 0.301, y: 0.416, z: -3.376, rotateY: 1.1, rotateZ: 3, rotateX: 6 }}
          transition={{ repeat: Infinity, repeatType: "mirror", duration: 2, type: "tween" }}
          geometry={nodes.Cube007.geometry} position={[0.321, 0.716, -3.176]}>

          {mat}
        </motion.mesh>
      </Float>
    </motion.group>
  );
}

useGLTF.preload("/astro.glb");
