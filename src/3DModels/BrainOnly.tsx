/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public/brainOnly.glb --types --output src/BrainOnly.tsx 
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    base: THREE.Mesh
    right_hemisphere: THREE.Mesh
    left_hemisphere: THREE.Mesh
    cerebellum: THREE.Mesh
    stem: THREE.Mesh
    BezierCurve: THREE.Mesh
  }
  materials: {}
  animations: any[]
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/brainOnly.glb') as GLTFResult
  return (
    <group {...props} dispose={null} >
      <mesh geometry={nodes.base.geometry} material={nodes.base.material} position={[0.137, 1.743, 0]} rotation={[Math.PI, 0, Math.PI]} scale={[0.337, 0.325, 0.308]} />
      <mesh geometry={nodes.right_hemisphere.geometry} material={nodes.right_hemisphere.material} position={[0.137, 1.743, 0]} rotation={[Math.PI, 0, Math.PI]} scale={[0.337, 0.325, 0.308]} />
      <mesh geometry={nodes.left_hemisphere.geometry} material={nodes.left_hemisphere.material} position={[0.137, 1.743, 0]} rotation={[-Math.PI, 0, 0]} scale={[-0.337, -0.325, -0.308]} />
      <mesh geometry={nodes.cerebellum.geometry} material={nodes.cerebellum.material} position={[-0.066, 1.587, 0]} scale={[0.123, 0.061, 0.123]} />
      <mesh geometry={nodes.stem.geometry} material={nodes.stem.material} position={[0.071, 1.561, 0]} scale={[0.083, 0.206, 0.083]} />
      <mesh geometry={nodes.BezierCurve.geometry} material={nodes.BezierCurve.material} position={[-0.048, 1.722, 0]} scale={0.793} />
    </group>
  )
}

// useGLTF.preload('/brainOnly.glb')
