/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 public/hand_anim.glb --types --output src/HandAnim.tsx 
*/

import * as THREE from 'three'
import React, { MutableRefObject, useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { lerp } from 'three/src/math/MathUtils.js'

type GLTFResult = GLTF & {
  nodes: {
    Mesh: THREE.SkinnedMesh
    Mesh_1: THREE.SkinnedMesh
    Mesh_2: THREE.SkinnedMesh
    Mesh_3: THREE.SkinnedMesh
    Bone: THREE.Bone
    Bone001: THREE.Bone
    Bone002: THREE.Bone
    Bone003: THREE.Bone
    Bone004: THREE.Bone
    Bone017: THREE.Bone
    Bone_1: THREE.Bone
    Bone001_1: THREE.Bone
    Bone002_1: THREE.Bone
    Bone003_1: THREE.Bone
    Bone004_1: THREE.Bone
    Bone017_1: THREE.Bone
  }
  materials: {
    skin: THREE.MeshStandardMaterial
    nails: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ActionName = 'ArmatureAction' | 'Armature.001Action'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}
type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>


type HandsProps = {
  scroll: MutableRefObject<number>;
  props?: JSX.IntrinsicElements["group"];

};

export function Model(props: HandsProps) {
  const group: any = useRef<any>()
  const { nodes, materials, animations } = useGLTF('/hand_anim.glb') as GLTFResult
  const { actions }: any = useAnimations(animations, group)


  useEffect(() => {
    actions["Armature.001Action"].reset().fadeIn(0.5).play().paused = true;
    actions["ArmatureAction"].reset().fadeIn(0.5).play().paused = true;
  }, []);

  useFrame((state) => {
    actions["Armature.001Action"].time = lerp(
      actions["Armature.001Action"].time,
      actions["Armature.001Action"].getClip().duration * props.scroll.current,
      0.0125
    );
    actions["ArmatureAction"].time = lerp(
      actions["ArmatureAction"].time,
      actions["ArmatureAction"].getClip().duration * props.scroll.current,
      0.0125
    );
  });

  return (
    <group ref={group} scale={8} position={[-10, -10, 0]} rotation={[0.85, 0, 0]} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" position={[0.455, 1.275, -0.076]} rotation={[Math.PI / 2, -0.262, 0]}>
          <primitive object={nodes.Bone} />
          <primitive object={nodes.Bone001} />
          <primitive object={nodes.Bone002} />
          <primitive object={nodes.Bone003} />
          <primitive object={nodes.Bone004} />
          <primitive object={nodes.Bone017} />
          <group name="Shape_IndexedFaceSet001">
            <skinnedMesh name="Mesh" geometry={nodes.Mesh.geometry} material={materials.skin} skeleton={nodes.Mesh.skeleton} />
            <skinnedMesh name="Mesh_1" geometry={nodes.Mesh_1.geometry} material={materials.nails} skeleton={nodes.Mesh_1.skeleton} />
          </group>
        </group>
        <group name="Armature001" position={[1.591, 1.305, -0.075]} rotation={[-Math.PI / 2, -0.448, 0]} scale={-1}>
          <primitive object={nodes.Bone_1} />
          <primitive object={nodes.Bone001_1} />
          <primitive object={nodes.Bone002_1} />
          <primitive object={nodes.Bone003_1} />
          <primitive object={nodes.Bone004_1} />
          <primitive object={nodes.Bone017_1} />
          <group name="Shape_IndexedFaceSet001001">
            <skinnedMesh name="Mesh_2" geometry={nodes.Mesh_2.geometry} material={materials.skin} skeleton={nodes.Mesh_2.skeleton} />
            <skinnedMesh name="Mesh_3" geometry={nodes.Mesh_3.geometry} material={materials.nails} skeleton={nodes.Mesh_3.skeleton} />
          </group>
        </group>
      </group>
    </group>
  )
}

// useGLTF.preload('/hand_anim.glb')
