/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/public.glb --types --output src/Public.tsx 
*/


import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { SkinnedMesh } from 'three/src/objects/SkinnedMesh.js'
import { Bone } from 'three/src/objects/Bone.js'
import { AnimationClip } from 'three/src/animation/AnimationClip.js'
import { Group } from 'three/src/objects/Group.js'

type GLTFResult = GLTF & {
  nodes: {
    Cube: SkinnedMesh
    mixamorigHips: Bone
  }
  materials: {}
  animations: GLTFAction[]
}

type ActionName = 'Armature|mixamo.com|Layer0'
interface GLTFAction extends AnimationClip {
  name: ActionName
}
type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export function Public(props: JSX.IntrinsicElements['group']) {
  const group: any = useRef<Group>()
  const { nodes, materials, animations } = useGLTF('/Public.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)
  const mat = <meshStandardMaterial color="white" toneMapped />
  useEffect(() => {
    actions['Armature|mixamo.com|Layer0']?.play()
  }, [])
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="Cube" geometry={nodes.Cube.geometry} skeleton={nodes.Cube.skeleton}>{mat}</skinnedMesh>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/Public.glb')
