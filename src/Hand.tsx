/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/hand.glb --types --output src/Hand.tsx 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { mat } from './ts/Materials'

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
  }
  materials: {}
  animations: []
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Hand(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/hand.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Cube.geometry} scale={[1, 0.319, 1]}>{mat}</mesh>
    </group>
  )
}

useGLTF.preload('/hand.glb')
